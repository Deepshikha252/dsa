Real-Life Applications of Array: 

    An array is frequently used to store data for mathematical computations.
    It is used in image processing.
    It is also used in record management.
    Book pages are also real-life examples of an array.
    It is used in ordering boxes as well.

Arrays:

An array is a linear data structure and it is a collection of items stored at contiguous memory locations. The idea is to store multiple items of the same type together in one place.


Given a sequence arr[] of size n, Write a function int equilibrium(int[] arr, int n) that returns an equilibrium index (if any) or -1 if no equilibrium index exists. 

    The equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. 

    Linear data structure: Data structure in which data elements are arranged sequentially or linearly, where each element is attached to its previous and next adjacent elements, is called a linear data structure. 
    Examples of linear data structures are array, stack, queue, linked list, etc.

        Static data structure: Static data structure has a fixed memory size. It is easier to access the elements in a static data structure. 
        An example of this data structure is an array.

        Dynamic data structure: In dynamic data structure, the size is not fixed. It can be randomly updated during the runtime which may be considered efficient concerning the memory (space) complexity of the code. 
        Examples of this data structure are queue, stack, etc.

    Non-linear data structure: Data structures where data elements are not placed sequentially or linearly are called non-linear data structures. In a non-linear data structure, we canâ€™t traverse all the elements in a single run only. 
    Examples of non-linear data structures are trees and graphs.

For example, we can store a list of items having the same data-type using the array data structure.

Advantages of using arrays: 

    Arrays allow random access to elements. This makes accessing elements by position faster.
    Arrays have better cache locality which makes a pretty big difference in performance.
    Arrays represent multiple data items of the same type using a single name.

ARRAY

Applications of Array Data Structure:

Below are some applications of arrays.

    Arrays are used to implement data structures like a stack, queue, etc.
    Arrays are used for matrices and other mathematical implementations.
    Arrays are used in lookup tables in computers.
    Arrays can be used for CPU scheduling.

Real-Time Applications of Array:

Below are some real-time applications of arrays.

    Contact lists on mobile phones.
    Matrices use arrays which are used in different fields like image processing, computer graphics, and many more.
    Arrays are used in online ticket booking portals.
    Pages of book.
    IoT applications use arrays as we know that the number of values in an array will remain constant, and also that the accessing will be faster.
    It is also utilised in speech processing, where each speech signal is represented by an array.
    The viewing screen of any desktop/laptop is also a multidimensional array of pixels.

Input: A[] = {-7, 1, 5, 2, -4, 3, 0} 
Output: 3 
3 is an equilibrium index, because: 
A[0] + A[1] + A[2] = A[4] + A[5] + A[6]

Input: A[] = {1, 2, 3} 
Output: -1 

Naive approach: To solve the problem follow the below idea:

    Use two loops. The Outer loop iterates through all the element and inner loop finds out whether the current index picked by the outer loop is equilibrium index or not
Time Complexity: O(N2)
Auxiliary Space: O(1)
// Java program to find equilibrium
// index of an array

class EquilibriumIndex {
	int equilibrium(int arr[], int n)
	{
		int i, j;
		int leftsum, rightsum;

		/* Check for indexes one by one until
		an equilibrium index is found */
		for (i = 0; i < n; ++i) {

			/* get left sum */
			leftsum = 0;
			for (j = 0; j < i; j++)
				leftsum += arr[j];

			/* get right sum */
			rightsum = 0;
			for (j = i + 1; j < n; j++)
				rightsum += arr[j];

			/* if leftsum and rightsum are same,
			then we are done */
			if (leftsum == rightsum)
				return i;
		}

		/* return -1 if no equilibrium index is found */
		return -1;
	}

	// Driver code
	public static void main(String[] args)
	{
		EquilibriumIndex equi = new EquilibriumIndex();
		int arr[] = { -7, 1, 5, 2, -4, 3, 0 };
		int arr_size = arr.length;

		// Function call
		System.out.println(equi.equilibrium(arr, arr_size));
	}
}

// This code has been contributed by Mayank Jaiswal
